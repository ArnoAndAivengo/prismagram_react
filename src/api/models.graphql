type User{
  id: ID!
  username: String! @unique
  email: String! @unique
  firstName: String @default(value: "")
  lastName: String
  fullName: String
  isFollowing: Boolean!
  isSelf: Boolean!
  bio: String
  following: [User!]! @relation(name: "FollowRelation")
  followers: [User!]! @relation(name: "FollowRelation")
  posts: [Post!]! @relation(name: "PostofUser", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikesofUser", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentsofUser", onDelete: CASCADE)
  rooms: [Room!]! @relation(name: "RoomsofUser", onDelete: CASCADE)
  loginSecret: String!
}

type Post{
  id: ID!
  location: String
  caption: String!
  user: User!
  files: [File!]! @relation(name: "FilesOfPost", onDelete: CASCADE)
  likes: [Like!]! @relation(name: "LikeOfPost", onDelete: CASCADE)
  comments: [Comment!]! @relation(name: "CommentOfPost", onDelete: CASCADE)
}

type Like{
  id: ID!
  user: User!
  user: User @relation(name: "LikesOfPost")
  post: Post @relation(name: "CommentOfPost")
}

type Comment{
  id: ID!
  text: String!
  user: User @relation(name: "CommentsOfUser")
  post: Post
}

type File{
  id: ID!
  url: String!
  post: Post @relation(name: "FilesOfPost")
}

type Room{
	id: ID!
	participants: [User!]!
	messages: [Message!]!
}

type Message{
	id: ID!
  text: String!
  from: User! @relation(name: "From")
  to: User! @relation(name: "To")
  room: Room!
}

type UserProfile {
  user: User!
  posts: [Post!]!
}